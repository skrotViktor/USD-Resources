# Form implementation generated from reading ui file 'box.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from collections import defaultdict
from pxr.Usdviewq.qt import QtCore, QtGui, QtWidgets
from pxr import Usd, Sdf
from enum import Enum


from vik import CodeProc
from vik.CodeProc.gui import editor


class ParmMode(Enum):
    READ = "read"
    WRITE = "write"
    READWRITE = "readWrite"


def launchDialog(usdviewApi):
    dial = Dialog(usdviewApi.qMainWindow, usdviewApi)
    dial.show()


class CodeProcItemModel(QtCore.QAbstractTableModel):
    def __init__(self, parent):
        super().__init__(parent)

        self._data = []
        self.defaultRow = ["", "", ParmMode.WRITE.value]


    def index(self, row, column, parent=QtCore.QModelIndex()):
        if row > len(self._data)-1:
            self._data += [[]] * (len(self._data)-1-row)

        return self.createIndex(row, column)
    

    def rowCount(self, parent=QtCore.QModelIndex()):
        return len(self._data)
    

    def columnCount(self, parent=QtCore.QModelIndex()):
        return 3


    def data(self, index, role):
        if index.row() >= len(self._data):
            return None
        if index.column() >= self.columnCount():
            return None


        if role == QtCore.Qt.ItemDataRole.DisplayRole or role == QtCore.Qt.ItemDataRole.EditRole:
            return self._data[index.row()][index.column()]

        return None


    def headerData(self, section, orientation, role):
        if orientation == QtCore.Qt.Orientation.Horizontal:
            if role == QtCore.Qt.ItemDataRole.DisplayRole:
                if section == 0:
                    return "Property Path"
                if section == 1:
                    return "Name"
                if section == 2:
                    return "Mode"
        if orientation == QtCore.Qt.Orientation.Vertical:
            if role == QtCore.Qt.ItemDataRole.DisplayRole:
                return "-"

        return super().headerData(section, orientation, role)


    def setData(self, index, value, role):
        if index.row() > len(self._data):
            return False
        elif index.row() == self.rowCount():
            self._data.append(self.defaultRow.copy())

        self._data[index.row()][index.column()] = value
        self.dataChanged.emit(index, index)
        return True


    def flags(self, index):
        return QtCore.Qt.ItemFlag.ItemIsEnabled | QtCore.Qt.ItemFlag.ItemIsEditable


    def insertRow(self, row, parent=QtCore.QModelIndex()):
        self.beginInsertRows(parent, row, row)
        self._data.append(self.defaultRow.copy())
        self.endInsertRows()

    def insertRows(self, row, count, parent=QtCore.QModelIndex()):
        self.beginInsertRows(parent, row, row+count)
        self._data.append(self.defaultRow.copy())
        self.endInsertRows()


    def removeRow(self, row, parent=QtCore.QModelIndex()):
        if 0 > row or row > self.rowCount()-1:
            return
    
        self.beginRemoveRows(parent, row, row)
        self._data.pop(row)
        self.endRemoveRows()
    
    def removeRows(self, row, count, parent=QtCore.QModelIndex()):
        if 0 > row or row > self.rowCount()-1:
            return
    
        self.beginRemoveRows(parent, row, count-1)
        for _ in range(count):
            self._data.pop(row)
        self.endRemoveRows()


class CodeProcItemView(QtWidgets.QTableView):
    def __init__(self, parent):
        super().__init__(parent)

    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.MouseButton.LeftButton:
            index = self.indexAt(event.position().toPoint())
            if index.isValid():
                self.edit(index)
        return super().mousePressEvent(event)


class ArgComboBoxItemDelegate(QtWidgets.QStyledItemDelegate):
    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self.currentOptionIndex = 0
        self.editing = None


    def paint(self, painter, option, index):
        if self.editing == index.row():
            return
        box = QtWidgets.QComboBox()
        data = index.data(QtCore.Qt.ItemDataRole.DisplayRole)

        box.addItem(data)
        box.setGeometry(option.rect)

        box.setAttribute(QtCore.Qt.WidgetAttribute.WA_TranslucentBackground)
        painter.drawPixmap(option.rect, box.grab())


    def createEditor(self, parent, option, index):
        box = QtWidgets.QComboBox(parent)
        
        box.addItems([ParmMode.READ.value,
                      ParmMode.WRITE.value,
                      ParmMode.READWRITE.value])
        box.setCurrentText(index.data(QtCore.Qt.ItemDataRole.EditRole))
        box.show()
        self.editing = index.row()
        return box


    def setModelData(self, editor, model, index):
        self.editing = None
        return super().setModelData(editor, model, index)


    def updateEditorGeometry(self, editor, option, index):
        editor.setGeometry(option.rect)
        return super().updateEditorGeometry(editor, option, index)



class kernelDialog(QtWidgets.QDialog):
    def __init__(self, parent):
        super().__init__(parent)
        
        layout = QtWidgets.QVBoxLayout()
        self.textEdit = editor.OpenCLTextEditor(self)
        self.okButton = QtWidgets.QPushButton("Ok")
        self.okButton.clicked.connect(self.accept)

        layout.addWidget(self.textEdit)
        layout.addWidget(self.okButton)

        self.setLayout(layout)

    def setText(self, text):
        self.textEdit.setText(text)
    
    def getText(self):
        return self.textEdit.toPlainText()


class Dialog(QtWidgets.QDialog):
    def __init__(self, parent, api, stage=None):
        super().__init__(parent)
    
        self.api = api
        if self.api:
            self.stage = self.api.stage
        else:
            self.stage = stage

        self.verticalLayout = QtWidgets.QVBoxLayout(self)
        self.verticalLayout.setContentsMargins(3,3,3,3)

        self.formSettings = QtWidgets.QFormLayout()
        self.formSettings.setLabelAlignment(QtCore.Qt.AlignmentFlag.AlignLeft)
        self.formSettings.setFieldGrowthPolicy(self.formSettings.FieldGrowthPolicy.AllNonFixedFieldsGrow)
        self.verticalLayout.addLayout(self.formSettings)

        self.loadSelectedPrimButton = QtWidgets.QPushButton("Load Selected Prim", parent=self)
        self.loadSelectedPrimButton.clicked.connect(self.loadSelectedPrim)
        self.formSettings.addRow(self.loadSelectedPrimButton)

        self.selectedPrim = QtWidgets.QLineEdit(self)
        self.formSettings.addRow("Selected Prim", self.selectedPrim)

        # Global work group size
        self.workgroupSize = QtWidgets.QComboBox(self)
        workgroupActions = ["First Writable Primvar", "Primvar", "Custom Size"]
        self.workgroupSize.addItems(workgroupActions)
        self.workgroupSize.currentIndexChanged.connect(self.updateWorkGroupWidgets)
        self.formSettings.addRow("Workgroup Mode", self.workgroupSize)

        self.workgroupPathWidget = QtWidgets.QLineEdit("Path To Property", self)
        self.formSettings.addRow("Primvar Path", self.workgroupPathWidget)
        self.formSettings.setRowVisible(3, False)

        self.workgroupSizeWidget = QtWidgets.QSpinBox(self)
        self.workgroupSizeWidget.setMaximum(2147483647)
        self.workgroupSizeWidget.setMinimum(0)
        self.formSettings.addRow("Count", self.workgroupSizeWidget)
        self.formSettings.setRowVisible(4, False)
        

        # Kernel arguments
        self.addParmButton = QtWidgets.QPushButton("Add Parameter", parent=self)
        self.addParmButton.clicked.connect(self.addParm)
    
        self.model = CodeProcItemModel(self)
        self.argModeEditor = ArgComboBoxItemDelegate(self)

        self.ParmsTable = CodeProcItemView(self)
        self.ParmsTable.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.AllEditTriggers)
        self.ParmsTable.setSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding,
                                     QtWidgets.QSizePolicy.Policy.Expanding)

        self.ParmsTable.setModel(self.model)
        self.ParmsTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.ParmsTable.setItemDelegateForColumn(2, self.argModeEditor)
        self.ParmsTable.verticalHeader().sectionClicked.connect(self.removeParm)


        # Kernel editor
        self.generateKernelButton = QtWidgets.QPushButton("Geneate Kernel", parent=self)
        self.generateKernelButton.clicked.connect(self.generateKernel)

        self.argsWidget = QtWidgets.QWidget(self)
        self.argsWidgetLayout = QtWidgets.QVBoxLayout()
        self.argsWidgetLayout.setContentsMargins(0,0,0,0)
        self.argsWidget.setLayout(self.argsWidgetLayout)

        self.argsWidgetLayout.addWidget(self.addParmButton)

        self.argsWidgetLayout.addWidget(self.ParmsTable)
        self.argsWidgetLayout.addWidget(self.generateKernelButton)

        self.textEdit = editor.OpenCLTextEditor(self)
        self.textEdit.setMinimumSize(QtCore.QSize(309, 0))
        self.verticalLayout.addWidget(self.textEdit)
        
        self.splitter = QtWidgets.QSplitter(QtCore.Qt.Orientation.Vertical, self)
        self.splitter.addWidget(self.argsWidget)
        self.splitter.addWidget(self.textEdit)
        self.verticalLayout.addWidget(self.splitter)

        self.saveButton = QtWidgets.QPushButton("Save", parent=self)
        self.saveButton.clicked.connect(self.saveAttributes)
        self.verticalLayout.addWidget(self.saveButton)

        self.kernelDialog = None

        # Fill UI from selected prim
        self.loadSelectedPrim()
    

    def updateWorkGroupWidgets(self, idx):
        self.formSettings.setRowVisible(3, idx==1)
        self.formSettings.setRowVisible(4, idx==2)


    def addParm(self, path=None, name=None, mode=None):
        row = self.model.rowCount()
        self.model.insertRow(row)

        if self.api and path is None:
            selectedProperty = self.api.property

            if not selectedProperty:
                return

            index = self.model.index(row, 0)
            self.model.setData(index, str(selectedProperty.GetPath()), QtCore.Qt.ItemDataRole.DisplayRole)
            return
        
        if path:
            index = self.model.index(row, 0)
            self.model.setData(index, path, QtCore.Qt.ItemDataRole.DisplayRole)
        if name:
            index = self.model.index(row, 1)
            self.model.setData(index, name, QtCore.Qt.ItemDataRole.DisplayRole)
        if mode:
            index = self.model.index(row, 2)
            self.model.setData(index, mode, QtCore.Qt.ItemDataRole.DisplayRole)


    def removeParm(self, row=-1):
        if row == -1:
            row = self.model.rowCount()-1
        self.model.removeRow(row)


    def generateKernel(self):
        kernelUtils = CodeProc.KernelUtils()
        
        for path, name, mode in self.traverseParms():
            prop = self.stage.GetAttributeAtPath(path)
            kernelUtils.addArgFromAttribute(prop, name)

        if not self.kernelDialog:
            self.kernelDialog = kernelDialog(self)

        self.kernelDialog.setText(kernelUtils.generateKernelCode())

        self.kernelDialog.show()
        self.kernelDialog.raise_()
        self.kernelDialog.activateWindow()

    
    def loadSelectedPrim(self):
        if self.api:
            selectedPrim = self.api.prim

        elif self.stage and __name__ == "__main__":
            selectedPrim = self.stage.GetPrimAtPath("/plane")
        if not selectedPrim:
            return

        self.selectedPrim.setText(str(selectedPrim.GetPath()))
        self.model.removeRows(0, self.model.rowCount())

        if not selectedPrim.HasAPI("CodeProceduralAPI"):
            return

        api = CodeProc.CodeProceduralAPI(selectedPrim)
    
        if api.GetReadWriteNamesAttr().Get():
            for path, name in zip(api.GetReadWriteRel().GetForwardedTargets(), api.GetReadWriteNamesAttr().Get()):
                self.addParm(str(path), name, ParmMode.READWRITE.value)

        if api.GetReadNamesAttr().Get():
            for path, name in zip(api.GetReadRel().GetForwardedTargets(), api.GetReadNamesAttr().Get()):
                self.addParm(str(path), name, ParmMode.READ.value)

        if api.GetWriteNamesAttr().Get():
            for path, name in zip(api.GetWriteRel().GetForwardedTargets(), api.GetWriteNamesAttr().Get()):
                self.addParm(str(path), name, ParmMode.WRITE.value)

        code = api.GetCodeAttr().Get()
        if code:
            self.textEdit.setText(code)
    

    def traverseParms(self):
        for i in range(self.model.rowCount()):
            index = self.model.index(i, 0)
            path = index.data(QtCore.Qt.ItemDataRole.DisplayRole)

            index = self.model.index(i, 1)
            name = index.data(QtCore.Qt.ItemDataRole.DisplayRole)
            if not name:
                name = path.split(".")[-1]
            
            index = self.model.index(i, 2)
            mode = index.data(QtCore.Qt.ItemDataRole.DisplayRole)

            yield path, name, mode
    

    def parseWorkGroupSize(self):
        idx = self.workgroupSize.currentIndex()
        if idx == 0:
            for path, name, mode in self.traverseParms():
                modeEnum = ParmMode(mode)
                if modeEnum is ParmMode.WRITE or modeEnum is ParmMode.READWRITE:
                    prop = self.stage.GetPropertyAtPath(path)
                    return len(prop.Get())
        if idx == 1:
            path = self.workgroupPathWidget.text()
            prop = self.stage.GetPropertyAtPath(path)
            return len(prop.Get())

        return self.workgroupSizeWidget.value()


    def saveAttributes(self):
        mappings = defaultdict(list)
        rels = defaultdict(list)
        for path, name, mode in self.traverseParms():
            mappings[mode].append(name)
            rels[mode].append(path)

        # layer = Sdf.Layer.CreateAnonymous("poopopopooo")

        prim = self.stage.GetPrimAtPath(self.selectedPrim.text())
        api = CodeProc.CodeProceduralAPI(prim)

        api.CreateReadWriteRel().SetTargets(rels[ParmMode.READWRITE.value])
        api.CreateWriteRel().SetTargets(rels[ParmMode.WRITE.value])
        api.CreateReadRel().SetTargets(rels[ParmMode.READ.value])

        api.CreateReadWriteNamesAttr().Set(mappings[ParmMode.READWRITE.value])
        api.CreateWriteNamesAttr().Set(mappings[ParmMode.WRITE.value])
        api.CreateReadNamesAttr().Set(mappings[ParmMode.READ.value])

        api.CreateCodeAttr().Set(self.textEdit.toPlainText())
        api.CreateWorkgroupSizeAttr().Set(self.parseWorkGroupSize())

        self.stage.Export(self.stage.GetRootLayer().resolvedPath)


if __name__ == "__main__":
    import os
    stage_name = os.path.join(os.path.dirname(__file__), "../testenv/codeProc.usda")

    stage = Usd.Stage.Open(stage_name)

    app = QtWidgets.QApplication()
    dial = Dialog(parent=None, api=None, stage=stage)

    dial.show()
    app.exec()